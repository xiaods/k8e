// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/traefik.yaml
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x3f\x6f\xe3\x30\x0c\xc5\x77\x7d\x0a\x21\x4b\x80\x03\x9c\xe0\xb6\x83\xc7\xeb\xd0\x3d\x40\xbb\xd3\x12\x9b\xa8\x91\x45\x81\xa4\x1c\xb4\x9f\xbe\x70\x9c\x16\x81\xdd\xfc\x71\x36\xc2\x20\x7f\xef\xd1\xd4\x83\x1c\x5e\x91\x25\x50\xaa\x2d\x37\xe0\x56\x50\x74\x47\x1c\x3e\x41\x03\xa5\xd5\xfe\x9f\xac\x02\xad\xbb\xbf\x66\x1f\x92\xaf\xed\x53\x2c\xa2\xc8\x1b\x8a\x68\x5a\x54\xf0\xa0\x50\x1b\x6b\x13\xb4\x58\x5b\x17\xa9\xf8\xca\x51\x52\xa6\x18\x91\xab\x16\x12\x6c\x91\x0d\x97\x88\x52\x9b\xca\x42\x0e\xcf\x4c\x25\x4b\x3f\x54\x59\x47\xc4\x3e\xa4\x73\x2d\x63\x2d\xa3\x50\x61\x87\xa7\xa6\x88\x20\x28\xc6\xda\x0e\xb9\x39\x7d\xdb\xa2\x0e\x00\x46\x50\x3c\x96\x25\xfb\xbe\x9c\x68\x2c\x16\x53\x24\x76\x98\x74\x84\x3c\x43\x65\x50\xb7\x9b\x0d\x4d\xe4\xc7\x36\x97\x7f\x96\x33\x66\xd7\xa2\xa0\x65\x84\x18\xbc\xdc\x05\x11\xe4\x2e\xb8\xb1\x87\x18\x44\x7f\xdf\xaa\x2f\x0f\xb3\xf1\xe0\x1c\x95\x4b\x7f\xef\x2e\x50\xee\x1f\x9c\x28\x26\xed\x28\x96\xf6\xd2\x6d\x7f\x8c\x3f\x66\x17\x93\xcf\x14\xae\x9d\x79\x22\x74\x98\xdc\xbd\xaa\xcc\xe3\x09\xf9\x1f\x92\x0f\x69\x3b\x2b\x28\x14\x71\x83\x6f\x7d\xe7\xf7\x8a\x57\x54\x8d\xb5\xd3\x58\xde\xd4\x90\xd2\xbc\xa3\xd3\x63\x1e\x87\xf1\x17\x41\xbe\x3d\x37\x34\x48\x06\x87\xb5\xdd\x97\x06\x2b\xf9\x10\xc5\xd6\x7c\x05\x00\x00\xff\xff\xff\xea\xf1\x4c\x44\x04\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdf\x6f\xdb\x38\x12\x7e\xf7\x5f\x41\xe8\xd0\xb7\x93\x13\x5f\xd0\x5e\xca\xb7\x36\xc9\xb5\x01\x1a\xd7\x88\x93\xbe\x1c\x16\xc5\x98\x1a\x5b\xdc\x50\x1c\x2e\x49\xb9\xf1\x76\xf3\xbf\x2f\xa8\x5f\x26\x1d\xa5\x48\x83\xae\x5e\x2c\x71\x38\xdf\x90\x1f\x67\x3e\x8e\xc1\xc8\x2f\x68\x9d\x24\xcd\xd9\x76\x36\xb9\x93\xba\xe0\x6c\x89\x76\x2b\x05\xbe\x13\x82\x6a\xed\x27\x15\x7a\x28\xc0\x03\x9f\x30\xa6\xa1\x42\xce\x04\x59\x2c\xb4\xeb\xbe\x9d\x01\x81\x9c\xdd\xd5\x2b\xcc\xdd\xce\x79\xac\x26\x79\x9e\x4f\x62\x68\xbb\x02\x31\x85\xda\x97\x64\xe5\x9f\xe0\x25\xe9\xe9\xdd\xa9\x9b\x4a\x3a\xda\xce\x56\xe8\xa1\x8f\x7c\xa6\x6a\xe7\xd1\x5e\x93\xc2\x24\xac\x82\x15\x2a\x17\xde\x58\x13\xc7\x6a\xf4\xd8\xf8\xaf\x88\xbc\xf3\x16\x8c\x91\x7a\xd3\x06\xca\x0b\x5c\x43\xad\xbc\x1b\xd6\xdb\xae\x8a\xf7\xcb\xb6\xb5\x42\xc7\x27\x39\x03\x23\x3f\x58\xaa\x4d\x83\x9c\xb3\x2c\x9b\x30\x66\xd1\x51\x6d\x05\x76\x63\xa8\x0b\x43\x52\x37\x60\x39\x73\x2d\x33\xed\x87\xa1\xa2\x7d\x19\x48\x08\x9f\x5b\xb4\xab\xce\x57\x49\xe7\x9b\x97\x6f\xe0\x45\xf9\xbc\x78\x9a\x8a\x43\x98\x0d\xfa\x5f\x41\xe8\x7b\xa9\x0b\xa9\x37\x09\xaf\xa0\x35\xf9\xc6\xbd\x23\x77\x0c\x37\xe1\x1b\x6a\x4f\xb5\x29\xc0\x23\x67\x99\xb7\x35\x66\xbf\xfe\x78\x48\xe1\x35\xae\x9b\xf5\x75\x84\xfd\x60\xc3\x13\xc6\x1e\xe7\xce\x13\xc8\xae\x5e\xfd\x8e\xc2\x37\x67\x3f\x9a\xea\x2f\x4e\xf0\xa1\x76\xce\x48\xaf\xe5\xe6\x0a\xcc\x4b\xca\xa6\x9f\x7e\x46\x16\xd7\x52\x21\x67\x7f\x35\x9c\x4e\xf9\xeb\x13\xf6\xbd\x79\x0d\x0f\x5a\x4b\xd6\x0d\x9f\x25\x82\xf2\xe5\xf0\x69\x11\x8a\xdd\xf0\xb5\x3f\x0e\xf6\xea\xfb\xd9\xa7\xdb\xe5\xcd\xc5\xf5\xd7\xf3\xcf\x57\xef\x2e\xe7\x0f\xaf\x98\xd4\x39\x14\x85\x9d\x82\x35\xc0\xa4\x79\xd3\xbe\xec\x23\xb1\x26\xc9\x99\xd4\x0e\x45\x6d\x31\x1a\xaf\x8d\xf3\x16\xa1\x8a\x86\xd6\xa0\x94\x2f\x2d\xd5\x9b\x72\x1c\x78\x98\xfb\xb0\x5f\x3b\x39\xef\xd8\x11\x7a\x71\xd4\xb1\x73\x34\xa7\x02\x3f\x36\xc3\xf1\x3a\x2c\x2a\x82\x82\xcd\xdc\x78\xc0\x11\x68\x63\xa9\x42\x5f\x62\xed\x18\x7f\x3b\x7b\x7d\x32\x18\xd6\x64\xbf\x81\x2d\xd8\xb4\x8d\x1b\x0a\x50\x6d\xa7\x82\xf4\x7a\x98\x22\x40\x94\xc8\x4e\x8e\x87\x01\x45\x64\x26\xe9\x5a\x22\x1b\x14\x2b\x50\xa0\x45\x4b\xd0\xc3\xa3\xec\x00\x63\xdc\xd1\x90\x22\xe7\x68\x14\xed\x2a\x7c\x99\xb4\x1e\x54\xdb\xa9\xcb\xc1\x98\x6e\x4a\xeb\x78\x58\x83\x2d\x70\x16\x92\xea\x7c\xbe\xcc\x26\xce\xa0\x08\xde\xff\xb2\x68\x94\x14\xe0\x38\x9b\x4d\x18\x0b\x65\xea\x71\xb3\x6b\x81\xfd\xce\x20\x67\xd7\xa4\x94\xd4\x9b\xdb\xa6\xe0\x5b\x81\x88\x47\x78\xc7\x41\x05\xf7\xb7\x1a\xb6\x20\x15\xac\x42\xd6\x36\x70\xa8\x50\x78\xb2\xed\x9c\x2a\x28\xe0\xa7\x68\xe1\xe3\x4b\xf7\x58\x19\x35\x00\xc7\xec\x34\x44\x27\xfe\x4f\x6d\xbe\xdf\x5e\xf3\x9e\x94\xf7\xfc\x80\xe1\x66\x9f\xa4\xd0\xc6\x0a\x18\x9e\x9c\xdd\xe1\x2e\x50\x66\xa5\x97\x02\xd4\xbb\xa2\x20\xed\x3e\x6b\xb5\xcb\xa2\xf4\x23\x13\x3c\xc9\x72\x96\x5d\xdc\x4b\xe7\x5d\xf6\x08\x20\xa8\x79\x1e\xf4\xec\x40\x45\x2b\x08\x52\xf5\x4c\x30\xc6\x70\xbd\x46\xe1\x39\xcb\xe6\xb4\x14\x25\x16\xb5\xc2\xde\x1c\x22\x2c\x13\xaa\xc3\x13\xae\x80\x83\x90\xe4\x38\x53\x52\xd7\xf7\xdd\x24\x41\xda\x83\xd4\x68\x87\x7d\xe7\x8f\x52\xb0\x7d\x64\x05\x1b\xe4\xcc\x82\x16\x25\xda\xbe\x4e\xf3\xee\x97\xcf\xa6\x6f\xa6\x6f\xd3\xc9\x8b\x5a\xa9\x05\x29\x29\x76\x9c\x5d\xae\xe7\xe4\x17\x16\x1d\x36\xfa\xda\x57\x50\x74\xe9\x0d\x75\x24\x2b\xe9\x93\x91\x90\x02\x15\xd9\x1d\x67\xb3\xff\x1e\x5f\xc9\x44\x0e\xfe\xa8\xd1\x1d\xce\x16\xa6\xe6\x6c\x76\x7c\x5c\x8d\x62\x24\x10\x60\x37\x8e\xb3\xff\xb3\x2c\x0f\x85\x9f\xfd\x9b\x65\x89\x08\xf5\x0a\x9c\xb1\xdf\x06\x97\x2d\xa9\xba\xc2\xab\x90\x49\x49\xae\xf4\xac\x05\xe1\xcf\xdb\x49\x51\xfc\x2a\xcc\x5f\x80\x2f\x79\x22\x73\xc9\x5e\xa0\x08\xb9\xc5\x59\xb8\x4f\xf7\xfa\x45\x36\x8d\x33\x9c\xd8\x82\xac\xe7\x2c\x52\xb4\x5e\x3c\x52\x5c\x63\xc9\x93\x20\xc5\xd9\xed\xf9\xe2\x67\x71\x72\x2f\xcc\x28\xd6\xcd\xd9\x0f\xb0\x12\x9d\xed\xd1\x2a\xf4\x56\x8a\xf1\x95\xc5\x68\xcd\x1d\x23\xfd\xee\x8c\xb4\xc7\x7b\x1f\x1f\x2d\x28\x45\xdf\x16\x56\x6e\xa5\xc2\x0d\x5e\x38\x01\xaa\xa9\x59\x1e\xee\x00\x17\xd3\x2d\xc0\xc0\x4a\x2a\xe9\x25\x1e\x24\x07\x14\x45\x3a\x90\xb3\xf9\xc5\xcd\xd7\xf7\x97\xf3\xf3\xaf\xcb\x8b\xeb\x2f\x97\x67\x17\x89\xb9\xb0\x64\x0e\x1d\x40\xa9\x91\x83\xbb\x26\xf2\xff\x93\x0a\xbb\x6e\x23\x3d\x46\x25\xb7\xa8\xd1\xb9\x85\xa5\x15\xc6\x78\xa5\xf7\xe6\x03\xfa\x34\x84\x69\x13\xe5\xe0\x4a\x67\x5d\x3a\x70\x76\x7a\x7c\x7a\x9c\x0c\x3b\x51\x62\x20\xf9\xe3\xcd\xcd\x22\x32\x48\x2d\xbd\x04\x75\x8e\x0a\x76\x4b\x14\xa4\x0b\xc7\xd9\x9b\xd8\xd5\xa0\x95\x54\x0c\xb6\x59\x6c\xf3\xb2\x42\xaa\xfd\xde\x18\xd9\x5c\x2d\x04\x3a\x77\x53\x5a\x74\x25\xa9\x22\xb5\xae\x41\xaa\xda\x62\x64\x3d\x49\x1a\x13\xf9\xd3\x54\xa4\xed\x4c\xc4\xc4\xec\x74\xf6\x62\x26\x7e\x40\xc4\x7f\xfe\x61\x1e\x0a\xed\x7a\x69\x3c\x6f\x1b\xe1\xce\xd0\x2a\xc7\x4f\x28\x8b\xe8\x5b\xcd\x94\xb7\x71\x11\x6f\xa8\xf0\x58\xb9\xc3\x94\x6e\x2e\xaa\x5e\xee\x12\x5b\x7f\x04\xa3\xc6\xce\x71\x68\xd6\x46\x3d\xf7\xd6\x27\xfb\xe5\xae\x01\x1f\xe9\x84\xa2\x4b\xfd\xc9\x56\xe8\xd1\xff\x97\x7d\xd3\x17\xee\xbc\x36\x53\xb2\xa0\x4a\xd9\x88\xd9\x09\x0b\xe6\xc9\xff\x31\xcf\xe8\xac\x44\xfb\x97\x23\xef\xda\x8c\x08\xe9\xb9\x3d\x58\xda\x25\x8d\xc5\xec\x62\x5c\x2e\x78\xdc\xc0\xcf\x97\x0f\xaf\x26\xd1\x1d\x91\x1f\xdc\x00\x26\x96\xf6\xc3\x8b\x20\x1f\x91\xf9\x27\x1c\x5a\x7d\xce\x47\x94\xdc\xa4\x82\x9f\xb8\xfc\x1d\x00\x00\xff\xff\x67\x17\xd5\x46\x56\x10\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x10\x02\xf6\x52\x2c\xe5\x35\xda\x43\xc1\x9b\xeb\xc7\x6e\x00\xbf\x60\xa7\xed\x21\x58\x18\x14\x35\xb6\xb9\xa1\x48\x81\x1c\xa9\xeb\x6e\xf3\xdf\x0b\xea\xe1\x48\x96\x93\x38\x28\xca\x8b\xec\xe1\xbc\xf8\xcd\x37\x43\xf2\x4c\xfe\x01\xd6\x49\xa3\x19\x29\x86\xc1\xa3\xd4\x09\x23\x5b\xb0\x85\x14\x30\x12\xc2\xe4\x1a\x83\x14\x90\x27\x1c\x39\x0b\x08\xd1\x3c\x05\x46\x94\x11\x5c\xd1\x8c\xe3\x91\x66\xd6\x14\xd2\xdb\x83\xa5\xae\xb2\xa3\xbc\x36\xac\xd4\x5d\xc6\x05\x30\xf2\x98\xc7\x40\xdd\xc9\x21\xa4\x01\xa5\x34\x68\x47\xb6\x31\x17\x11\xcf\xf1\x68\xac\xfc\x9b\xa3\x34\x3a\x7a\xfc\xd5\x45\xd2\x0c\x8a\x61\x0c\xc8\x9b\xc4\xc6\x2a\x77\x08\x76\x63\x14\xdc\x9e\x95\xf5\xda\x36\x57\xe0\x58\x40\x09\xcf\xe4\x67\x6b\xf2\xcc\x31\xf2\x10\x86\x5f\x03\x42\x2c\x38\x93\x5b\x01\xa5\x44\x9b\x04\x5c\xf8\x91\x84\x99\xcf\xcd\x21\x68\x2c\x8c\xca\x53\x10\x8a\xcb\xd4\x95\x06\x05\xd8\xb8\x54\x3e\x00\x7a\x55\x25\x5d\xf9\xfd\x8b\xa3\x38\x86\x5f\xdf\x0e\x02\x3a\xc9\x8c\xd4\x78\x35\x50\x25\x34\xc9\x45\xac\x9f\x6e\x72\x5c\x80\xf7\xda\x31\x14\x16\x38\x42\xe9\xf4\x7a\x7e\x0e\x8d\xe5\x07\xa8\x11\xef\x3b\xad\xf7\x85\xe2\xce\xc1\x8d\x08\xfc\xf7\xfa\xfe\x26\x75\x22\xf5\xe1\xf6\x32\xc7\x52\x27\x81\xaf\xf5\x06\xf6\x5e\xb9\x39\xe3\x2b\xd1\x03\x42\xfa\xbc\xba\x85\x4d\x2e\x8f\xbf\x81\xc0\x92\x50\x57\x5b\xe6\xff\x6a\x14\x9e\x65\x6e\x70\xee\xd3\x09\x64\xca\x9c\x52\x78\x47\x8f\xbe\x1c\xca\x65\x20\x58\x59\xfb\x4c\x49\xc1\x1d\x23\xc3\x80\x10\x07\x0a\x04\x1a\xeb\x77\x08\x49\x7d\x7d\xe7\x3c\x06\xe5\x2a\x81\x87\x39\x7b\x25\x16\x42\x9a\x29\x8e\x50\x9b\xb7\x92\xf4\x4b\x75\x3c\xbd\xe5\x8b\x90\x26\xc5\xf2\x77\x07\xf0\xe5\xfb\xd0\xf6\x0b\x8d\x02\x5b\xb2\xa1\x95\x01\x21\x94\x3c\xc2\x89\x91\x70\x6c\x25\x4a\xc1\xd5\x28\x49\x8c\x76\x2b\xad\x4e\x61\x4b\x8b\x10\x93\x79\x6b\x63\x19\x09\xa7\xdf\xa5\x43\x17\x5e\x71\xe2\xa7\x49\xc9\x98\xc8\x23\x6d\x35\x20\x94\xac\x4f\xb9\xa7\xdb\x3b\x1c\x12\x02\xfb\x3d\x08\x64\x24\x5c\x9a\xad\x38\x42\x92\x2b\x68\x14\x84\xd1\xc8\xa5\x06\x7b\x3e\x08\x7d\x8b\x03\xd5\x92\x29\x3f\x00\x23\x96\x6b\x71\x04\x3b\xb8\xae\xcd\x8a\x4f\xd1\xa7\x68\xf8\x4b\xd7\x6a\x9d\x2b\xb5\x36\x4a\x8a\x13\x23\x77\xfb\xa5\xc1\xb5\x05\x07\x67\x70\x7d\x52\x69\xca\x75\xf2\x0c\x2d\x7d\x2b\x1b\x4a\x1c\x72\x8b\xad\xff\x94\x0a\xa3\xf7\xf2\xd0\x12\x0d\x00\xc5\xa0\x92\xd6\x9f\xe8\x9b\x33\xfa\xac\x51\xcd\xd0\x85\xaf\xb3\x6b\xc7\xae\xf0\xa8\x2c\x68\xa5\xd4\x82\x37\xf5\xfa\x6b\x8e\x47\xd6\x09\x70\xd6\x00\x5d\xf4\x9d\xad\x57\x93\xdd\x72\xb4\x98\x6e\xd7\xa3\xf1\xb4\xe5\xac\xe0\x2a\x87\x99\x35\x29\xeb\x14\x70\x2f\x41\x25\xf5\x6c\xea\xc9\xab\xd8\x4d\x7f\x44\xe7\x16\xed\x05\xfd\x32\x9d\xaf\xa7\x9b\xdd\xdd\x62\xf4\xb9\x17\xb3\x55\x49\x19\x5b\x6e\x4f\x34\xce\xdd\x29\x36\xdf\xd9\x30\xfa\x79\x18\x0d\x83\x36\x44\xef\x40\xa7\x92\x2f\x78\xd6\x4d\xbd\x47\xb1\xba\x58\x97\x33\xab\x7b\xbf\x3c\x4f\xaf\x6d\x25\x1f\xfb\x7b\xe5\xd5\xf9\xe5\x87\xb9\xd6\x06\xdb\xcd\xda\xbe\x94\x2e\x9a\x4b\x3a\x9a\xc0\x9e\xe7\x0a\x69\xb9\xcd\x48\x88\x36\x87\x30\x68\x93\xba\x81\xca\x1b\xb4\x22\x55\x67\xaf\xef\x9e\x85\x49\x80\x91\x3f\xb9\xc4\x99\xb1\x33\x69\x1d\x8e\x8d\x76\x79\x0a\x36\xb0\xd5\x7b\xa0\xe9\x80\x09\x28\x40\x28\x4f\x5e\x5f\x28\x0d\x64\xc1\xc5\x03\xeb\xd5\x39\x7d\x66\xfb\x0b\x23\xba\x31\x6c\x11\x9f\x91\x7f\xe8\xb9\x2a\x3f\x2e\xa8\x45\xaa\x09\xe4\xc9\xb5\xe0\x59\xc8\x1e\x7a\xfb\x7d\x8b\x8e\x65\xc8\xc2\xc9\x74\x36\xfa\x7d\x7e\xbf\x5b\x8f\xee\xbf\xec\x66\xab\xcd\x6e\xb9\x5a\xee\xe6\x77\xdb\xfb\xe9\x64\xb7\x5c\x4d\xa6\xdb\xf0\xe3\xcb\x3e\xfc\xa9\x5c\xc8\x1e\xc2\x0f\x3f\x1a\x3f\xf3\xd5\x78\x34\xdf\x6d\xef\x57\x9b\xd1\xe7\x69\xe9\xf5\xe9\x43\xf9\xa6\xe8\xae\xa7\x9e\xe4\x59\xe7\x29\xf8\x37\x00\x00\xff\xff\xb5\xc6\x5c\xc0\xb6\x0a\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbb\x4e\xc4\x40\x0c\x45\xfb\xf9\x8a\xf9\x81\x09\xda\x0e\xb9\x03\x0a\xfa\x45\xa2\x77\x26\x97\xc5\x24\x19\x47\xb6\x27\x12\x7c\x3d\x5a\x11\xd1\xf0\x68\xaf\x74\xcf\x39\xa5\x94\xc4\x9b\x3c\xc3\x5c\xb4\x51\xb6\x91\xeb\xc0\x3d\x5e\xd5\xe4\x83\x43\xb4\x0d\xf3\xad\x0f\xa2\x37\xfb\x69\x44\xf0\x29\xcd\xd2\x26\xca\x0f\x4b\xf7\x80\x9d\x75\xc1\xbd\xb4\x49\xda\x25\xad\x08\x9e\x38\x98\x52\xce\x8d\x57\x50\x5e\x11\x26\xd5\x8b\xc3\x76\x18\xf9\xbb\x07\x56\xba\xd2\xcb\x84\x05\x17\x0e\xb5\x64\xba\xe0\x8c\x97\xeb\x8b\x37\x79\x34\xed\xdb\x3f\x19\x29\xe7\x1f\x01\xdf\xbe\xdf\x05\xde\xc7\x37\xd4\x70\x4a\xe5\xf8\x3e\xc1\x76\xa9\xb8\xab\x55\x7b\x8b\x3f\x72\x8f\xd9\x37\xae\xa0\x3c\xf7\x11\xe5\x8b\x9f\x3e\x03\x00\x00\xff\xff\x69\xfc\x98\x93\x34\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\xc4\x40\x0c\x46\xfb\x39\xc5\x5c\xc0\x41\xdb\xa1\xe9\xa0\xa1\x5f\x24\x7a\x67\xf2\x01\x26\x1b\x4f\x64\x7b\x22\xe0\xf4\x28\x68\xf9\x69\x76\x7b\xfb\x7d\xef\x11\x51\xe2\x55\x9e\x60\x2e\x4d\x4b\xb6\x91\xeb\xc0\x3d\x5e\x9b\xc9\x27\x87\x34\x1d\xe6\x5b\x1f\xa4\xdd\x6c\x87\x11\xc1\x87\x34\x8b\x4e\x25\x1f\xdb\x09\xf7\xa2\x93\xe8\x4b\x5a\x10\x3c\x71\x70\x49\x39\x2b\x2f\x28\x79\x41\x98\x54\x27\x87\x6d\x30\xda\x79\x64\xe0\x09\x76\x3e\xf1\x95\x2b\x4a\x9e\xfb\x08\xf2\x0f\x0f\x2c\xc9\xda\x09\x47\x3c\xef\x10\x5e\xe5\xc1\x5a\x5f\xaf\xe8\xa4\x9c\xff\x44\x7e\x77\xf1\x1e\xd0\x3d\x84\x78\x95\x7f\xe3\xd0\x90\xfa\xfd\xfe\xa3\xe1\x7d\x7c\x43\x0d\x2f\x89\xce\xa0\x47\xd8\x26\x15\x77\xb5\xb6\xae\x71\x21\xe5\xb2\xfe\x57\x00\x00\x00\xff\xff\xc7\x9e\x8d\xd1\x49\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x08\xe3\x1f\x24\x39\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x90\xbc\xf7\x0e\x1b\xdf\x48\x94\x6b\x09\x80\x8d\x85\x9e\xac\x26\x68\x5c\xcb\x94\xde\x75\xe2\xfa\xb6\xce\x77\x32\x9c\x5d\xe2\xf2\x08\xf0\x71\xfd\x5c\x48\x56\x8e\xe4\x32\x19\x3e\xd0\x30\x38\x80\x82\x99\x02\x1c\xd5\x29\x93\x09\x47\x3d\x0c\x4e\x1b\xc5\xbd\xa4\x2f\x70\x1f\x07\x71\x34\xfd\x1e\x91\x9c\x81\x36\x8c\x14\x20\xf5\x3b\x79\xdd\xd4\x28\x3b\x80\xa7\xd4\xde\x4e\x64\xc8\x01\xd6\xf1\xc0\xb8\x14\x80\x8b\x52\xec\x42\x4b\xe2\xf6\xf3\xb5\xdc\x48\xf8\x77\x0b\x60\xd2\x69\x88\xae\xc2\x55\xd8\xb6\x6f\x2e\x9c\x7b\x0e\x30\x5f\x2e\xff\xb2\x91\xbe\xd6\x7f\x01\x00\x00\xff\xff\x25\x03\x92\xf5\x2a\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x51\x4d\x8b\x13\x51\x10\xbc\xcf\xaf\x28\xe2\xf9\x25\x8a\x20\xf2\x6e\x8b\xeb\x4d\x57\x61\xc1\x7b\xef\x9b\x8e\x79\xe4\x7d\xd1\xdd\x19\x1d\xc4\xff\x2e\xe3\x24\x63\xb2\xbb\x11\xc1\x77\x1a\x7a\xaa\xba\xaa\xba\x9c\x73\x1d\xb5\xf8\x85\x45\x63\x2d\x1e\xc3\xab\x6e\x1f\x4b\xef\x71\xcf\x32\xc4\xc0\x37\x21\xd4\x43\xb1\x2e\xb3\x51\x4f\x46\xbe\x03\x0a\x65\xf6\xc8\x6c\x12\x83\x3a\x65\x19\x58\x8e\x63\x6d\x14\xd8\x63\x7f\x78\x60\xa7\xa3\x1a\xe7\xee\xb1\x02\xb5\xa6\x9b\x45\xe6\x96\x5b\xaa\x63\xe6\xff\x92\x00\x12\x3d\x70\xd2\x89\x09\xec\xdf\xaa\xa3\xd6\x9e\xd0\xb5\x71\x98\x10\xca\x89\x83\x55\x99\xd1\x99\x2c\xec\x3e\x9c\xd1\xaf\x2f\x00\x8c\x73\x4b\x64\x7c\xa4\x9e\x19\x9e\xde\x15\xd3\xd3\x4b\x17\x02\x7f\x93\x00\x4e\x3e\x7f\x7f\x5f\xb4\x70\x77\x5d\xc0\x6a\x62\x21\x8b\xb5\x9c\xa9\x38\xec\x79\xf4\x58\xbd\x93\x68\x31\x50\xba\xe9\xfb\x5a\xf4\x53\x49\xe3\x6a\xc1\x00\xb5\x4d\xcc\x2a\x1e\xab\xf7\xdf\xa3\x9a\xae\x9e\x2c\x28\xb5\x67\x27\x35\xf1\x7a\x3a\xbb\x14\x36\xd6\x75\xac\x9b\x4c\x6a\x2c\xff\xb8\x0c\xe0\xed\x96\x83\x79\xac\xee\xea\x7d\xd8\x71\x7f\x48\x7c\xfa\x3d\xd4\x74\xc8\xbc\x78\x7f\x81\x3c\x05\x46\x2c\xb0\xdc\xa0\x15\xdf\x18\x81\x0a\x94\xb6\x9c\x46\x1c\x94\xb1\x95\x9a\x9d\x06\x99\x0a\x44\xcc\xf4\x95\x15\x54\xfa\x4d\x15\x08\x53\xef\x6a\x49\x23\x42\x2d\x46\xb1\xb0\x68\x77\x8a\x34\xd7\x64\xb9\xb9\x3e\xca\xe2\x8e\x73\xb3\xf1\x36\x8a\xc7\x8f\x9f\xc7\xe1\x1f\xae\x7f\x44\x7e\xb6\x02\xcc\x26\x3c\x84\x4a\xd8\xb1\x6c\x2e\x51\x7e\x78\xb9\x7e\xbd\x7e\xb3\x80\xe7\xc4\x1f\xa7\x98\x17\x95\x3d\x6f\x0f\xf3\x41\x3e\x93\xed\x3c\x36\x96\x5b\xd7\xfd\x0a\x00\x00\xff\xff\x40\xda\x3c\x8b\xbb\x03\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xcd\x4a\x04\x31\x10\x84\xef\x79\x8a\x26\xf7\x28\xe2\x1e\x24\x57\xcf\xc2\x82\xe2\xbd\x37\x5b\x48\x98\xfc\xd1\xdd\x33\xe0\xdb\xcb\xc4\x41\x10\xe6\xd6\x54\x57\x7d\x55\x21\x04\xc7\x23\x7f\x42\x34\xf7\x16\x69\x7b\x72\x4b\x6e\xf7\x48\xef\x90\x2d\x27\xb8\x0a\xe3\x3b\x1b\x47\x47\xd4\xb8\x22\x52\x85\x49\x4e\x1a\x14\xb2\x41\x0e\x59\x07\x27\x44\x5a\xd6\x1b\x82\x7e\xab\xa1\x3a\xa2\xc2\x37\x14\xdd\x93\x34\x3f\xd2\x60\xd0\x87\xdc\x1f\x7f\x49\xfe\xed\x1f\xca\x9f\x18\x53\x59\xd5\x20\xd3\x91\xf7\x06\x6f\xb2\xc2\x3b\x1d\x48\x3b\x58\x51\x90\xac\xcb\x51\xf2\xa2\x81\xc7\x38\xd9\x38\xba\xd8\x5c\x12\xe6\x19\xe9\x72\x79\x9e\x91\x21\xdd\x7a\xea\x25\xd2\xc7\xeb\x75\x2a\xc6\xf2\x05\xbb\xfe\xb9\x7e\x02\x00\x00\xff\xff\x92\x19\xf9\x3e\x23\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x3f\x4f\xc4\x30\x0c\xc5\xf7\x7c\x0a\xeb\xf6\xf4\xc4\x86\xb2\x01\x03\xfb\x21\xb1\xbb\xa9\xb9\x33\x6d\xe3\xca\x76\x8a\xe0\xd3\xa3\x6b\xcb\x1f\x81\x74\x42\x62\xca\x4b\xe2\x9f\x9f\xde\x8b\x31\x06\x9c\xf8\x91\xd4\x58\x4a\x02\x6d\x31\x37\x58\xfd\x24\xca\x6f\xe8\x2c\xa5\xe9\xaf\xad\x61\xd9\xcf\x57\xa1\xe7\xd2\x25\xb8\x1b\xaa\x39\xe9\x41\x06\x0a\x23\x39\x76\xe8\x98\x02\x40\xc1\x91\x12\xd8\xab\x39\x8d\x69\x24\x57\xce\x16\x8d\x74\x26\x0d\x5a\x07\xb2\x14\x22\xe0\xc4\xf7\x2a\x75\xb2\x33\x11\x61\xb7\x0b\x00\x4a\x26\x55\x33\x6d\x6f\x93\x74\xb6\x88\x22\x1d\x7d\x53\x7b\x73\xf4\xed\x8e\x23\xd9\x84\x79\xf9\x9e\x49\xdb\x0d\x3d\x92\x2f\xe7\xc0\xb6\x8a\x17\xf4\x7c\x0a\xff\x0b\x79\xcb\xa5\xe3\x72\xfc\x7b\x56\x19\xe8\x40\x4f\xe7\xb1\x8f\xb4\x17\x2c\x03\xc0\xef\x5a\x2f\x1b\x58\x6d\x9f\x29\xfb\xd2\xe7\xca\x3e\x90\xce\x9c\xe9\x26\x67\xa9\xc5\x3f\xf1\x1f\x1c\x7c\xf5\x96\xa0\xaf\x2d\xc5\x75\x7f\x78\x0f\x00\x00\xff\xff\x39\x82\xcc\x46\x05\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x21\xbb\x72\xb8\x2d\xf0\x78\x37\x74\x0f\xd0\xee\xb4\xcd\x26\xac\x65\x51\x20\xa9\x04\xed\xaf\x2f\x9c\xba\x09\x92\xda\x41\xd2\x76\x93\x04\xf1\x7d\x7c\xe4\x83\x4c\x4f\x28\x4a\x9c\x2a\x2f\x35\x34\x4b\x28\xb6\x65\xa1\x37\x30\xe2\xb4\xec\x56\xba\x24\xfe\xb3\xfb\xeb\x3a\x4a\x6d\xe5\xff\xc7\xa2\x86\xb2\xe6\x88\xff\x28\xb5\x94\x36\xae\x47\x83\x16\x0c\x2a\xe7\x7d\x82\x1e\x2b\xdf\x95\x1a\x03\x64\x52\x94\x1d\x4a\x18\xae\x11\x2d\x40\xdb\x53\x72\xc2\x11\xd7\xf8\x3c\xfc\x86\x4c\x0f\xc2\x25\x5f\x21\x3b\xef\xbf\x80\x8f\x1c\x7d\x55\xc3\xbe\x3a\xea\x67\x1a\x19\x5a\xea\x17\x6c\x4c\x2b\x17\xee\x82\x3c\x2a\xca\x8c\x0b\xe7\x42\x08\xee\xfb\xd3\x9a\x18\xd3\x67\xfb\x2b\x0c\x0d\x27\x13\x8e\x11\xc5\x49\x89\x78\xd6\xb8\x0e\x15\xc1\x2f\x16\xce\x7b\x41\xe5\x22\x0d\x8e\x6f\x89\x5b\x54\xe7\xfd\x0e\xa5\x1e\x9f\x36\x68\x37\xd6\x42\x8f\x9a\xa1\xb9\x14\x88\xa4\x76\x38\xec\xc1\x9a\xed\x84\x56\x42\xdb\xb3\x74\x94\x36\xa3\xdf\x29\xf1\x8f\x3f\x99\x23\x35\x74\x37\x61\x42\x10\x53\x9b\x99\x92\xe9\xe1\x96\xb9\x9d\xd3\x1c\xfc\x9f\xb4\x7f\xb8\xb4\xf9\x88\xcf\xec\xee\xf7\xb3\x7d\x0e\x38\x05\x7b\xf0\x78\x1b\xe3\x22\xdc\xd7\x01\xef\x01\x00\x00\xff\xff\x24\xb7\xd1\xea\x0f\x04\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x8b\xd4\x40\x10\xc5\xef\xf9\x14\x45\x60\x8f\x49\x9c\x9b\xf4\x6d\x1d\x03\x8a\xb0\x2e\x8e\x7a\x95\x4a\xe7\xcd\xa4\x99\xfe\x13\xaa\x2a\x83\xe3\x9f\xef\x2e\x19\xc6\x59\x11\x85\xed\x5b\x57\xff\xde\xab\x7a\x5d\x3c\x87\xcf\x10\x0d\x25\x3b\x9a\x10\x53\xeb\xd9\x2c\xa2\x0d\xa5\x3b\x6d\xaa\x63\xc8\xa3\xa3\x37\x88\x69\x3b\xb1\x58\x95\x60\x3c\xb2\xb1\xab\x88\x32\x27\x38\x32\x61\xec\xc3\xf1\x7a\xd7\x99\x3d\x1c\x1d\x97\x01\x8d\x9e\xd5\x90\x2a\x9d\xe1\x57\xdc\xaf\x06\x8e\x26\xb3\x59\x5d\xd7\xdd\x7d\x7f\xf7\xe9\x55\xff\xe1\xa1\xff\xd8\xef\xbe\xdc\x3f\xbe\xfd\x79\xd7\xa9\xb1\x05\xdf\x5d\x40\xed\xae\xc6\xcd\xa6\x7d\xb9\x69\x5f\xb4\x76\xf8\x56\x11\x9d\x38\x2e\xd0\x6d\xc9\x86\x6c\x8e\x7e\x34\x15\x11\x91\x0c\x7c\x69\xb1\x1e\x64\x1e\x22\xc6\x75\xb0\x05\x97\x9a\x6a\xfc\xff\x63\x82\x49\xf0\xfa\x1b\x98\xa5\x24\xd8\x84\xe5\x56\xf9\x97\x68\x8d\x27\x19\x86\x1b\x15\xf2\x41\xa0\xda\xe7\x71\x2e\x21\xdb\x93\x78\x51\xbc\xc6\x9e\x97\x68\x8f\xcb\x10\x83\x4e\x18\x77\x90\x53\xf0\xf8\xc3\x2f\x24\x3e\xc0\x51\x2d\x9c\xfd\x04\xe9\x62\x18\x84\xe5\xdc\x5c\xbf\xa0\xbe\x40\x56\x22\x84\x2d\x94\x7c\xeb\xda\xd0\x11\x67\x47\xf5\x56\x82\x05\xcf\xf1\x7e\x1c\x4b\xd6\xf7\x39\x9e\xeb\xdb\x00\x65\x5e\x55\x45\x1c\xd5\xfd\xd7\xa0\xa6\xf5\x5f\xe2\x5c\x46\x34\x52\x22\xda\xa7\x58\xeb\xf6\x13\xab\x41\x9e\x61\x44\x84\xfd\x1e\xde\x1c\xd5\x0f\x65\xe7\x27\x8c\x4b\x44\x5d\xfd\x0a\x00\x00\xff\xff\x16\x3d\xa0\x9a\x59\x02\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
